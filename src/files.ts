export function getFiles(owner, repo) {
  return [
    {
      path: ".changeset/README.md",
      content: `# Changesets

Hello and welcome! This folder has been automatically generated by \`@changesets/cli\`, a build tool that works
with multi-package repos, or single-package repos to help you version and publish your code. You can
find the full documentation for it [in our repository](https://github.com/changesets/changesets)

We have a quick list of common questions to get you started engaging with this project in
[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)`,
    },
    {
      path: ".changeset/config.json",
      content: `{
  "$schema": "https://unpkg.com/@changesets/config@2.2.0/schema.json",
  "changelog": [
    "@changesets/changelog-github",
    {
      "repo": "${owner}/${repo}"
    }
  ],
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "main",
  "updateInternalDependencies": "patch",
  "ignore": []
}
`,
    },
    {
      path: ".github/workflows/release.yml",
      content: `name: Release

on:
  push:
    branches:
      - main

concurrency: \${{ github.workflow }}-\${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Dependencies
        run: pnpm i

      - name: Build
        run: pnpm run build

      - name: Create Release Pull Request
        uses: changesets/action@v1
        with:
          publish: pnpm run release
          version: pnpm run version
          commit: "release: publish new version"
          title: Release new version
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: \${{ secrets.NPM_TOKEN }}
`,
    },
    {
      path: ".gitignore",
      content: `node_modules
dist
`,
    },
    {
      path: "tsconfig.json",
      content: `{
  "compilerOptions": {
    "lib": ["esnext", "dom"],
    "strict": true,
    "isolatedModules": true,
    "module": "ESNext",
    "moduleResolution": "node",
    "jsx": "preserve",
    "declaration": true,
    "allowImportingTsExtensions": true,
    "emitDeclarationOnly": true,
    "baseUrl": "./"
  }
}
`,
    },
  ];
}

export function getPackageJson(owner, repo) {
  return {
    name: repo,
    version: "0.0.0",
    description: "Icon sets power by lsicon",
    homepage: `https://www.lsicon.com?package=${repo}`,
    repository: {
      type: "git",
      url: `git+ssh://git@github.com:${owner}/${repo}.git`,
    },
    main: "dist/index.js",
    module: "dist/index.js",
    files: ["dist"],
    types: "dist/index.d.ts",
    type: "module",
    publishConfig: {
      access: "public",
    },
    scripts: {
      changelog: "pnpm changeset",
      version: "pnpm changeset version",
      release: "pnpm changeset tag && git push --follow-tags && pnpm publish",
      clean: "rm -rf node_modules",
      build: "lsicon build",
    },
    peerDependencies: {
      "@types/react": ">=16",
      react: ">=16",
    },
    dependencies: {
      "@changesets/changelog-github": "0.5.0",
      "@changesets/cli": "2.27.5",
      lsicon: "0.0.1",
    },
  };
}

function getListContent({ title, prefix = '', suffix = '', icons }) {
  if (!icons.length) {
    return "";
  }

  return `${title}

${icons.map((icon) => `  - ${prefix}${icon.fileName}${suffix}`).join("\n")}
`;
}

export function getChangelog({
  icons = [],
  preIcons = [],
  repo,
  versionMode,
}) {
  const newIconMap = icons.reduce((result, item) => {
    result[item.fileName] = item;
    return result;
  }, {});

  const oldIconMap = preIcons.reduce((result, item) => {
    result[item.fileName] = item;
    return result;
  }, {});

  const addIcons = icons.filter(
    (item) => !oldIconMap[item.fileName]
  );
  const removeIcons = preIcons.filter(
    (item) => !newIconMap[item.fileName]
  );
  const updateIcons = icons.filter((item) => {
    const oldItem = oldIconMap[item.fileName];
    return oldItem && oldItem.fileContent !== item.fileContent;
  });

  const result = [];
  result.push(getListContent({ title: "ðŸš€ add icons:", icons: addIcons }));
  result.push(getListContent({ title: "ðŸ—‘ remove icons:", icons: removeIcons, prefix: '~~', suffix: '~~' }));
  result.push(getListContent({ title: "ðŸ”„ update icons:", icons: updateIcons }));

  return {
    add: addIcons,
    remove: removeIcons,
    update: updateIcons,
    isEmpty: !addIcons.length && !removeIcons.length && !updateIcons.length,
    fileContent: `---
"${repo}": ${versionMode}
---

Release new icon version

${result.filter(Boolean).join("\n")}
`,
  };
}
